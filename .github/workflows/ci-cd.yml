name: CI/CD Pipeline

on:
  push:
    branches:
      - main  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  

    steps:
      # Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Setting up Python
      - name: Setting up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Installing dependencies
      - name: Installing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      # Running tests
      - name: Running tests
        run: |
          python -m pytest  

      # Authenticating with Google Cloud
      - name: Authenticating with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # Configuring Docker for Artifact Registry
      - name: Configuring Docker for Artifact Registry
        run: gcloud auth configure-docker australia-southeast2-docker.pkg.dev

      # Building and pushing Docker image to Artifact Registry
      - name: Build and Push Docker image to GCP Artifact Registry
        run: |
          docker build -t australia-southeast2-docker.pkg.dev/project-k8-primordial/ci-cd-pipeline/ci-cd_pipeline:latest .
          docker push australia-southeast2-docker.pkg.dev/project-k8-primordial/ci-cd-pipeline/ci-cd_pipeline:latest

            # Install Google Cloud SDK manually (bypass apt-get issues)
      - name: Manually Install Google Cloud SDK
        run: |
          curl -fsSL https://sdk.cloud.google.com | bash
          echo 'export PATH="$HOME/google-cloud-sdk/bin:$PATH"' >> $HOME/.bashrc
          source $HOME/.bashrc  # Ensure it's loaded

      # Fix GPG key issue & Add Google Cloud SDK repository
      - name: Fix GPG Key for Google Cloud SDK
        run: |
          sudo mkdir -p -m 755 /usr/share/keyrings
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /usr/share/keyrings/cloud.google.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update

      # Install GKE Authentication Plugin directly
      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin
          echo 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True' >> $HOME/.bashrc
          source $HOME/.bashrc  # Ensure it's loaded

      # Verify that the plugin is installed correctly
      - name: Verify GKE Authentication Plugin Installation
        run: gcloud components list | grep gke-gcloud-auth-plugin || echo "Plugin not found!"

      # Deploying to GKE
      - name: Setting up kubectl
        run: |
          gcloud container clusters get-credentials my-cluster --region australia-southeast2-a --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploying to GKE
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml


      # Backup Deployment: Pushing to Docker Hub
      - name: Logging in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Building and pushing Docker image to Docker Hub
        run: |
          docker tag australia-southeast2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/ci-cd-pipeline/ci-cd_pipeline:latest ${{ secrets.DOCKER_HUB_USERNAME }}/ci-cd_pipeline:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ci-cd_pipeline:latest

      # Backup Deployment: Deploying to Heroku
      - name: Installing Heroku CLI
        run: |
         curl https://cli-assets.heroku.com/install.sh | sh

      - name: Deploying to Heroku
        run: |
          echo ${{ secrets.HEROKU_API_KEY }} | docker login --username=_ --password-stdin registry.heroku.com
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/ci-cd_pipeline:latest registry.heroku.com/glacial-lowlands-50508/web
          docker push registry.heroku.com/glacial-lowlands-50508/web
          heroku container:release web -a glacial-lowlands-50508
